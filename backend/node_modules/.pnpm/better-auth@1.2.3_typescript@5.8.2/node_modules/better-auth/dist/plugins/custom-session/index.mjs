import { z } from 'zod';
import 'better-call';
import { a as createAuthEndpoint, g as getSessionFromCtx } from '../../shared/better-auth.npe3WWSD.mjs';
import '../../shared/better-auth.8zoxzg-F.mjs';
import '@better-auth/utils/base64';
import '@better-auth/utils/hmac';
import '../../shared/better-auth.C24Bzw4w.mjs';
import '../../shared/better-auth.DH3YjMQH.mjs';
import 'defu';
import '../../cookies/index.mjs';
import '../../shared/better-auth.DdzSJf-n.mjs';
import '../../shared/better-auth.CW6D9eSx.mjs';
import '../../shared/better-auth.tB5eU6EY.mjs';
import '../../social-providers/index.mjs';
import '@better-fetch/fetch';
import 'jose';
import '@better-auth/utils/hash';
import '../../shared/better-auth.D7syfoJW.mjs';
import '@noble/ciphers/chacha';
import '@noble/ciphers/utils';
import '@noble/ciphers/webcrypto';
import '@noble/hashes/scrypt';
import '@better-auth/utils';
import '@better-auth/utils/hex';
import '@noble/hashes/utils';
import '../../shared/better-auth.B4Qoxdgc.mjs';
import '@better-auth/utils/random';
import '../../shared/better-auth.CoMXyQ1y.mjs';
import '../../shared/better-auth.BUPPRXfK.mjs';
import '../../shared/better-auth.DDEbWX-S.mjs';
import '../../shared/better-auth.NcLhHEks.mjs';
import 'jose/errors';
import '@better-auth/utils/binary';

const customSession = (fn, options) => {
  return {
    id: "custom-session",
    endpoints: {
      getSession: createAuthEndpoint(
        "/get-session",
        {
          method: "GET",
          metadata: {
            CUSTOM_SESSION: true
          },
          query: z.optional(
            z.object({
              /**
               * If cookie cache is enabled, it will disable the cache
               * and fetch the session from the database
               */
              disableCookieCache: z.boolean({
                description: "Disable cookie cache and fetch session from database"
              }).or(z.string().transform((v) => v === "true")).optional(),
              disableRefresh: z.boolean({
                description: "Disable session refresh. Useful for checking session status, without updating the session"
              }).optional()
            })
          )
        },
        async (ctx) => {
          const session = await getSessionFromCtx(ctx);
          if (!session) {
            return ctx.json(null);
          }
          const fnResult = await fn(session);
          return ctx.json(fnResult);
        }
      )
    }
  };
};

export { customSession };
