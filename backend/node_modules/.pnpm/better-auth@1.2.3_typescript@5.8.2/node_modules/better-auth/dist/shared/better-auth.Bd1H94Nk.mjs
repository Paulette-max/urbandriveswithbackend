import { APIError } from 'better-call';
import { c as createAuthMiddleware, g as getSessionFromCtx } from './better-auth.npe3WWSD.mjs';
import { setSessionCookie } from '../cookies/index.mjs';
import { z } from 'zod';
import './better-auth.C24Bzw4w.mjs';
import './better-auth.8zoxzg-F.mjs';
import './better-auth.DH3YjMQH.mjs';
import 'defu';
import { createHMAC } from '@better-auth/utils/hmac';

const TWO_FACTOR_COOKIE_NAME = "two_factor";
const TRUST_DEVICE_COOKIE_NAME = "trust_device";

const verifyTwoFactorMiddleware = createAuthMiddleware(
  {
    body: z.object({
      /**
       * if true, the device will be trusted
       * for 30 days. It'll be refreshed on
       * every sign in request within this time.
       */
      trustDevice: z.boolean().optional()
    })
  },
  async (ctx) => {
    const session = await getSessionFromCtx(ctx);
    if (!session) {
      const cookieName = ctx.context.createAuthCookie(TWO_FACTOR_COOKIE_NAME);
      const userId = await ctx.getSignedCookie(
        cookieName.name,
        ctx.context.secret
      );
      if (!userId) {
        throw new APIError("UNAUTHORIZED", {
          message: "invalid two factor cookie"
        });
      }
      const user = await ctx.context.internalAdapter.findUserById(
        userId
      );
      if (!user) {
        throw new APIError("UNAUTHORIZED", {
          message: "invalid two factor cookie"
        });
      }
      const dontRememberMe = await ctx.getSignedCookie(
        ctx.context.authCookies.dontRememberToken.name,
        ctx.context.secret
      );
      const session2 = await ctx.context.internalAdapter.createSession(
        userId,
        ctx.request,
        !!dontRememberMe
      );
      if (!session2) {
        throw new APIError("INTERNAL_SERVER_ERROR", {
          message: "failed to create session"
        });
      }
      return {
        valid: async (ctx2) => {
          await setSessionCookie(ctx2, {
            session: session2,
            user
          });
          if (ctx2.body.trustDevice) {
            const trustDeviceCookie = ctx2.context.createAuthCookie(
              TRUST_DEVICE_COOKIE_NAME,
              {
                maxAge: 30 * 24 * 60 * 60
                // 30 days, it'll be refreshed on sign in requests
              }
            );
            const token = await createHMAC("SHA-256", "base64urlnopad").sign(
              ctx2.context.secret,
              `${user.id}!${session2.token}`
            );
            await ctx2.setSignedCookie(
              trustDeviceCookie.name,
              `${token}!${session2.token}`,
              ctx2.context.secret,
              trustDeviceCookie.attributes
            );
            ctx2.setCookie(ctx2.context.authCookies.dontRememberToken.name, "", {
              maxAge: 0
            });
            ctx2.setCookie(cookieName.name, "", {
              maxAge: 0
            });
          }
          return ctx2.json({
            token: session2.token,
            user: {
              id: user.id,
              email: user.email,
              emailVerified: user.emailVerified,
              name: user.name,
              image: user.image,
              createdAt: user.createdAt,
              updatedAt: user.updatedAt
            }
          });
        },
        invalid: async () => {
          throw new APIError("UNAUTHORIZED", {
            message: "invalid two factor authentication"
          });
        },
        session: {
          session: session2,
          user
        }
      };
    }
    return {
      valid: async (ctx2) => {
        return ctx2.json({
          token: session.session.token,
          user: {
            id: session.user.id,
            email: session.user.email,
            emailVerified: session.user.emailVerified,
            name: session.user.name,
            image: session.user.image,
            createdAt: session.user.createdAt,
            updatedAt: session.user.updatedAt
          }
        });
      },
      invalid: async () => {
        throw new APIError("UNAUTHORIZED", {
          message: "invalid two factor authentication"
        });
      },
      session
    };
  }
);

export { TRUST_DEVICE_COOKIE_NAME as T, TWO_FACTOR_COOKIE_NAME as a, verifyTwoFactorMiddleware as v };
